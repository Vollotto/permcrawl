{"android.permission.MANAGE_ACCOUNTS": ["android.accounts.AccountManager.clearPassword(android.accounts.Account)void  ", "android.accounts.AccountManager.invalidateAuthToken(java.lang.String,java.lang.String)void  "], "android.permission.ACCESS_NETWORK_STATE": ["android.net.ConnectivityManager.getActiveNetworkInfo()android.net.NetworkInfo  ", "android.net.ConnectivityManager.getAllNetworkInfo()android.net.NetworkInfo[]  ", "android.net.ConnectivityManager.getNetworkInfo(int)android.net.NetworkInfo  ", "android.net.ConnectivityManager.getNetworkPreference()int  ", "android.net.ConnectivityManager.isActiveNetworkMetered()boolean  "], "android.permission.CHANGE_NETWORK_STATE": ["android.net.ConnectivityManager.requestRouteToHost(int,int)boolean  ", "android.net.ConnectivityManager.setNetworkPreference(int)void  ", "android.net.ConnectivityManager.startUsingNetworkFeature(int,java.lang.String)int  ", "android.net.ConnectivityManager.stopUsingNetworkFeature(int,java.lang.String)int  "], "android.permission.NFC": ["android.nfc.NfcAdapter.disableForegroundDispatch(android.app.Activity)void  ", "android.nfc.NfcAdapter.disableForegroundNdefPush(android.app.Activity)void  ", "android.nfc.NfcAdapter.enableForegroundDispatch(android.app.Activity,android.app.PendingIntent,[android.content.IntentFilter,[[java.lang.String)void  ", "android.nfc.NfcAdapter.enableForegroundNdefPush(android.app.Activity,android.nfc.NdefMessage)void  ", "android.nfc.NfcAdapter.setBeamPushUris([android.net.Uri,android.app.Activity)void  ", "android.nfc.NfcAdapter.setBeamPushUrisCallback(android.nfc.NfcAdapter$CreateBeamUrisCallback,android.app.Activity)void  ", "android.nfc.NfcAdapter.setNdefPushMessage(android.nfc.NdefMessage,android.app.Activity,[android.app.Activity)void  ", "android.nfc.NfcAdapter.setNdefPushMessageCallback(android.nfc.NfcAdapter$CreateNdefMessageCallback,android.app.Activity,[android.app.Activity)void  ", "android.nfc.NfcAdapter.setOnNdefPushCompleteCallback(android.nfc.NfcAdapter$OnNdefPushCompleteCallback,android.app.Activity,[android.app.Activity)void  ", "android.nfc.tech.BasicTagTechnology.close()void  ", "android.nfc.tech.BasicTagTechnology.connect()void  ", "android.nfc.tech.IsoDep.close()void  ", "android.nfc.tech.IsoDep.connect()void  ", "android.nfc.tech.IsoDep.getTimeout()int  ", "android.nfc.tech.IsoDep.setTimeout(int)void  ", "android.nfc.tech.IsoDep.transceive([byte)B[]  ", "android.nfc.tech.MifareClassic.authenticateSectorWithKeyA(int,[byte)boolean  ", "android.nfc.tech.MifareClassic.authenticateSectorWithKeyB(int,[byte)boolean  ", "android.nfc.tech.MifareClassic.close()void  ", "android.nfc.tech.MifareClassic.connect()void  ", "android.nfc.tech.MifareClassic.decrement(int,int)void  ", "android.nfc.tech.MifareClassic.getTimeout()int  ", "android.nfc.tech.MifareClassic.increment(int,int)void  ", "android.nfc.tech.MifareClassic.readBlock(int)B[]  ", "android.nfc.tech.MifareClassic.restore(int)void  ", "android.nfc.tech.MifareClassic.setTimeout(int)void  ", "android.nfc.tech.MifareClassic.transceive([byte)B[]  ", "android.nfc.tech.MifareClassic.transfer(int)void  ", "android.nfc.tech.MifareClassic.writeBlock(int,[byte)void  ", "android.nfc.tech.MifareUltralight.close()void  ", "android.nfc.tech.MifareUltralight.connect()void  ", "android.nfc.tech.MifareUltralight.getTimeout()int  ", "android.nfc.tech.MifareUltralight.readPages(int)B[]  ", "android.nfc.tech.MifareUltralight.setTimeout(int)void  ", "android.nfc.tech.MifareUltralight.transceive([byte)B[]  ", "android.nfc.tech.MifareUltralight.writePage(int,[byte)void  ", "android.nfc.tech.Ndef.close()void  ", "android.nfc.tech.Ndef.connect()void  ", "android.nfc.tech.Ndef.getNdefMessage()android.nfc.NdefMessage  ", "android.nfc.tech.Ndef.makeReadOnly()boolean  ", "android.nfc.tech.Ndef.writeNdefMessage(android.nfc.NdefMessage)void  ", "android.nfc.tech.NdefFormatable.close()void  ", "android.nfc.tech.NdefFormatable.connect()void  ", "android.nfc.tech.NdefFormatable.format(android.nfc.NdefMessage)void  ", "android.nfc.tech.NdefFormatable.formatReadOnly(android.nfc.NdefMessage)void  ", "android.nfc.tech.NfcA.close()void  ", "android.nfc.tech.NfcA.connect()void  ", "android.nfc.tech.NfcA.getTimeout()int  ", "android.nfc.tech.NfcA.setTimeout(int)void  ", "android.nfc.tech.NfcA.transceive([byte)B[]  ", "android.nfc.tech.NfcB.close()void  ", "android.nfc.tech.NfcB.connect()void  ", "android.nfc.tech.NfcB.transceive([byte)B[]  ", "android.nfc.tech.NfcF.close()void  ", "android.nfc.tech.NfcF.connect()void  ", "android.nfc.tech.NfcF.getTimeout()int  ", "android.nfc.tech.NfcF.setTimeout(int)void  ", "android.nfc.tech.NfcF.transceive([byte)B[]  ", "android.nfc.tech.NfcV.close()void  ", "android.nfc.tech.NfcV.connect()void  ", "android.nfc.tech.NfcV.transceive([byte)B[]  "], "android.permission.SET_TIME_ZONE": ["android.app.AlarmManager.setTimeZone(java.lang.String)void  "], "android.permission.REORDER_TASKS": ["android.app.ActivityManager.moveTaskToFront(int,int)void  ", "android.app.ActivityManager.moveTaskToFront(int,int,android.os.Bundle)void  "], "android.permission.CHANGE_WIFI_STATE": ["android.net.wifi.WifiManager.addNetwork(android.net.wifi.WifiConfiguration)int  ", "android.net.wifi.WifiManager.disableNetwork(int)boolean  ", "android.net.wifi.WifiManager.disconnect()boolean  ", "android.net.wifi.WifiManager.enableNetwork(int,boolean)boolean  ", "android.net.wifi.WifiManager.reassociate()boolean  ", "android.net.wifi.WifiManager.reconnect()boolean  ", "android.net.wifi.WifiManager.removeNetwork(int)boolean  ", "android.net.wifi.WifiManager.saveConfiguration()boolean  ", "android.net.wifi.WifiManager.setWifiEnabled(boolean)boolean  ", "android.net.wifi.WifiManager.startScan()boolean  ", "android.net.wifi.WifiManager.updateNetwork(android.net.wifi.WifiConfiguration)int  ", "android.net.wifi.p2p.WifiP2pManager.initialize(android.content.Context,android.os.Looper,android.net.wifi.p2p.WifiP2pManager$ChannelListener)android.net.wifi.p2p.WifiP2pManager$Channel  "], "android.permission.USE_SIP": ["android.net.sip.SipManager.close(java.lang.String)void  ", "android.net.sip.SipManager.createSipSession(android.net.sip.SipProfile,android.net.sip.SipSession$Listener)android.net.sip.SipSession  ", "android.net.sip.SipManager.getSessionFor(android.content.Intent)android.net.sip.SipSession  ", "android.net.sip.SipManager.isOpened(java.lang.String)boolean  ", "android.net.sip.SipManager.isRegistered(java.lang.String)boolean  ", "android.net.sip.SipManager.makeAudioCall(android.net.sip.SipProfile,android.net.sip.SipProfile,android.net.sip.SipAudioCall$Listener,int)android.net.sip.SipAudioCall  ", "android.net.sip.SipManager.makeAudioCall(java.lang.String,java.lang.String,android.net.sip.SipAudioCall$Listener,int)android.net.sip.SipAudioCall  ", "android.net.sip.SipManager.open(android.net.sip.SipProfile)void  ", "android.net.sip.SipManager.open(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.SipRegistrationListener)void  ", "android.net.sip.SipManager.register(android.net.sip.SipProfile,int,android.net.sip.SipRegistrationListener)void  ", "android.net.sip.SipManager.setRegistrationListener(java.lang.String,android.net.sip.SipRegistrationListener)void  ", "android.net.sip.SipManager.takeAudioCall(android.content.Intent,android.net.sip.SipAudioCall$Listener)android.net.sip.SipAudioCall  ", "android.net.sip.SipManager.unregister(android.net.sip.SipProfile,android.net.sip.SipRegistrationListener)void  "], "android.permission.KILL_BACKGROUND_PROCESSES": ["android.app.ActivityManager.killBackgroundProcesses(java.lang.String)void  ", "android.app.ActivityManager.restartPackage(java.lang.String)void  "], "android.permission.WAKE_LOCK": ["android.media.AsyncPlayer.play(android.content.Context,android.net.Uri,boolean,int)void  ", "android.media.AsyncPlayer.stop()void  ", "android.media.MediaPlayer.pause()void  ", "android.media.MediaPlayer.release()void  ", "android.media.MediaPlayer.reset()void  ", "android.media.MediaPlayer.setWakeMode(android.content.Context,int)void  ", "android.media.MediaPlayer.start()void  ", "android.media.MediaPlayer.stop()void  ", "android.media.Ringtone.play()void  ", "android.media.Ringtone.setStreamType(int)void  ", "android.media.Ringtone.stop()void  ", "android.media.RingtoneManager.getRingtone(android.content.Context,android.net.Uri)android.media.Ringtone  ", "android.media.RingtoneManager.getRingtone(int)android.media.Ringtone  ", "android.media.RingtoneManager.stopPreviousRingtone()void  ", "android.net.sip.SipAudioCall.close()void  ", "android.net.sip.SipAudioCall.endCall()void  ", "android.net.sip.SipAudioCall.startAudio()void  ", "android.net.wifi.WifiManager$WifiLock.acquire()void  ", "android.net.wifi.WifiManager$WifiLock.release()void  ", "android.os.PowerManager$WakeLock.acquire()void  ", "android.os.PowerManager$WakeLock.acquire(long)void  ", "android.os.PowerManager$WakeLock.release()void  ", "android.widget.VideoView.onKeyDown(int,android.view.KeyEvent)boolean  ", "android.widget.VideoView.pause()void  ", "android.widget.VideoView.resume()void  ", "android.widget.VideoView.setVideoPath(java.lang.String)void  ", "android.widget.VideoView.setVideoURI(android.net.Uri)void  ", "android.widget.VideoView.start()void  ", "android.widget.VideoView.stopPlayback()void  ", "android.widget.VideoView.suspend()void  "], "android.permission.VIBRATE": ["android.os.SystemVibrator.cancel()void  ", "android.os.SystemVibrator.vibrate([long,int)void  ", "android.os.SystemVibrator.vibrate(long)void  "], "android.permission.SET_WALLPAPER": ["android.accounts.AccountAuthenticatorActivity.clearWallpaper()void  ", "android.accounts.AccountAuthenticatorActivity.setWallpaper(android.graphics.Bitmap)void  ", "android.accounts.AccountAuthenticatorActivity.setWallpaper(java.io.InputStream)void  ", "android.app.Activity.clearWallpaper()void  ", "android.app.Activity.setWallpaper(android.graphics.Bitmap)void  ", "android.app.Activity.setWallpaper(java.io.InputStream)void  ", "android.app.ActivityGroup.clearWallpaper()void  ", "android.app.ActivityGroup.setWallpaper(android.graphics.Bitmap)void  ", "android.app.ActivityGroup.setWallpaper(java.io.InputStream)void  ", "android.app.AliasActivity.clearWallpaper()void  ", "android.app.AliasActivity.setWallpaper(android.graphics.Bitmap)void  ", "android.app.AliasActivity.setWallpaper(java.io.InputStream)void  ", "android.app.Application.clearWallpaper()void  ", "android.app.Application.setWallpaper(android.graphics.Bitmap)void  ", "android.app.Application.setWallpaper(java.io.InputStream)void  ", "android.app.ExpandableListActivity.clearWallpaper()void  ", "android.app.ExpandableListActivity.setWallpaper(android.graphics.Bitmap)void  ", "android.app.ExpandableListActivity.setWallpaper(java.io.InputStream)void  ", "android.app.ListActivity.clearWallpaper()void  ", "android.app.ListActivity.setWallpaper(android.graphics.Bitmap)void  ", "android.app.ListActivity.setWallpaper(java.io.InputStream)void  ", "android.app.NativeActivity.clearWallpaper()void  ", "android.app.NativeActivity.setWallpaper(android.graphics.Bitmap)void  ", "android.app.NativeActivity.setWallpaper(java.io.InputStream)void  ", "android.app.TabActivity.clearWallpaper()void  ", "android.app.TabActivity.setWallpaper(android.graphics.Bitmap)void  ", "android.app.TabActivity.setWallpaper(java.io.InputStream)void  ", "android.app.WallpaperManager.clear()void  ", "android.app.WallpaperManager.setBitmap(android.graphics.Bitmap)void  ", "android.app.WallpaperManager.setResource(int)void  ", "android.app.WallpaperManager.setStream(java.io.InputStream)void  ", "android.app.backup.BackupAgentHelper.clearWallpaper()void  ", "android.app.backup.BackupAgentHelper.setWallpaper(android.graphics.Bitmap)void  ", "android.app.backup.BackupAgentHelper.setWallpaper(java.io.InputStream)void  ", "android.content.ContextWrapper.clearWallpaper()void  ", "android.content.ContextWrapper.setWallpaper(android.graphics.Bitmap)void  ", "android.content.ContextWrapper.setWallpaper(java.io.InputStream)void  ", "android.content.MutableContextWrapper.clearWallpaper()void  ", "android.content.MutableContextWrapper.setWallpaper(android.graphics.Bitmap)void  ", "android.content.MutableContextWrapper.setWallpaper(java.io.InputStream)void  ", "android.inputmethodservice.InputMethodService.clearWallpaper()void  ", "android.inputmethodservice.InputMethodService.setWallpaper(android.graphics.Bitmap)void  ", "android.inputmethodservice.InputMethodService.setWallpaper(java.io.InputStream)void  ", "android.net.VpnService.clearWallpaper()void  ", "android.net.VpnService.setWallpaper(android.graphics.Bitmap)void  ", "android.net.VpnService.setWallpaper(java.io.InputStream)void  ", "android.test.IsolatedContext.clearWallpaper()void  ", "android.test.IsolatedContext.setWallpaper(android.graphics.Bitmap)void  ", "android.test.IsolatedContext.setWallpaper(java.io.InputStream)void  ", "android.test.RenamingDelegatingContext.clearWallpaper()void  ", "android.test.RenamingDelegatingContext.setWallpaper(android.graphics.Bitmap)void  ", "android.test.RenamingDelegatingContext.setWallpaper(java.io.InputStream)void  ", "android.test.mock.MockApplication.clearWallpaper()void  ", "android.test.mock.MockApplication.setWallpaper(android.graphics.Bitmap)void  ", "android.test.mock.MockApplication.setWallpaper(java.io.InputStream)void  ", "android.view.ContextThemeWrapper.clearWallpaper()void  ", "android.view.ContextThemeWrapper.setWallpaper(android.graphics.Bitmap)void  ", "android.view.ContextThemeWrapper.setWallpaper(java.io.InputStream)void  "], "android.permission.GET_TASKS": ["android.app.ActivityManager.getRecentTasks(int,int)java.util.List  ", "android.app.ActivityManager.getRunningTasks(int)java.util.List  "], "android.permission.CHANGE_WIFI_MULTICAST_STATE": ["android.net.wifi.WifiManager$MulticastLock.acquire()void  ", "android.net.wifi.WifiManager$MulticastLock.release()void  "], "android.permission.ACCESS_COARSE_LOCATION": ["android.location.LocationManager.addProximityAlert(double,double,float,long,android.app.PendingIntent)void  ", "android.location.LocationManager.getBestProvider(android.location.Criteria,boolean)java.lang.String  ", "android.location.LocationManager.getLastKnownLocation(java.lang.String)android.location.Location  ", "android.location.LocationManager.getProvider(java.lang.String)android.location.LocationProvider  ", "android.location.LocationManager.getProviders(android.location.Criteria,boolean)java.util.List  ", "android.location.LocationManager.getProviders(boolean)java.util.List  ", "android.location.LocationManager.isProviderEnabled(java.lang.String)boolean  ", "android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)void  ", "android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)void  ", "android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)void  ", "android.location.LocationManager.requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)void  ", "android.location.LocationManager.requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)void  ", "android.location.LocationManager.requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)void  ", "android.location.LocationManager.requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)void  ", "android.location.LocationManager.requestSingleUpdate(java.lang.String,android.app.PendingIntent)void  ", "android.location.LocationManager.requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)void  ", "android.location.LocationManager.sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)boolean  ", "android.telephony.TelephonyManager.listen(android.telephony.PhoneStateListener,int)void  "], "android.permission.AUTHENTICATE_ACCOUNTS": ["android.accounts.AccountManager.addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)boolean  ", "android.accounts.AccountManager.getPassword(android.accounts.Account)java.lang.String  ", "android.accounts.AccountManager.getUserData(android.accounts.Account,java.lang.String)java.lang.String  ", "android.accounts.AccountManager.peekAuthToken(android.accounts.Account,java.lang.String)java.lang.String  ", "android.accounts.AccountManager.setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)void  ", "android.accounts.AccountManager.setPassword(android.accounts.Account,java.lang.String)void  ", "android.accounts.AccountManager.setUserData(android.accounts.Account,java.lang.String,java.lang.String)void  "], "android.permission.ACCESS_WIFI_STATE": ["android.net.sip.SipAudioCall.startAudio()void  ", "android.net.wifi.WifiManager.getConfiguredNetworks()java.util.List  ", "android.net.wifi.WifiManager.getConnectionInfo()android.net.wifi.WifiInfo  ", "android.net.wifi.WifiManager.getDhcpInfo()android.net.DhcpInfo  ", "android.net.wifi.WifiManager.getScanResults()java.util.List  ", "android.net.wifi.WifiManager.getWifiState()int  ", "android.net.wifi.WifiManager.isWifiEnabled()boolean  ", "android.net.wifi.WifiManager.pingSupplicant()boolean  ", "android.net.wifi.p2p.WifiP2pManager.initialize(android.content.Context,android.os.Looper,android.net.wifi.p2p.WifiP2pManager$ChannelListener)android.net.wifi.p2p.WifiP2pManager$Channel  "], "android.permission.DISABLE_KEYGUARD": ["android.app.KeyguardManager$KeyguardLock.disableKeyguard()void  ", "android.app.KeyguardManager$KeyguardLock.reenableKeyguard()void  ", "android.app.KeyguardManager.exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)void  "], "android.permission.SEND_SMS": ["android.telephony.SmsManager.sendDataMessage(java.lang.String,java.lang.String,short,[byte,android.app.PendingIntent,android.app.PendingIntent)void  ", "android.telephony.SmsManager.sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)void  ", "android.telephony.SmsManager.sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)void  ", "android.telephony.gsm.SmsManager.sendDataMessage(java.lang.String,java.lang.String,short,[byte,android.app.PendingIntent,android.app.PendingIntent)void  ", "android.telephony.gsm.SmsManager.sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)void  ", "android.telephony.gsm.SmsManager.sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)void  "], "android.permission.BLUETOOTH_ADMIN": ["android.bluetooth.BluetoothA2dp.isA2dpPlaying(android.bluetooth.BluetoothDevice)boolean  ", "android.bluetooth.BluetoothAdapter.cancelDiscovery()boolean  ", "android.bluetooth.BluetoothAdapter.disable()boolean  ", "android.bluetooth.BluetoothAdapter.enable()boolean  ", "android.bluetooth.BluetoothAdapter.setName(java.lang.String)boolean  ", "android.bluetooth.BluetoothAdapter.startDiscovery()boolean  ", "android.bluetooth.BluetoothHealth.connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)boolean  ", "android.bluetooth.BluetoothHealth.disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)boolean  ", "android.bluetooth.BluetoothHealth.unregisterAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration)boolean  ", "android.net.ConnectivityManager.setNetworkPreference(int)void  ", "android.net.ConnectivityManager.startUsingNetworkFeature(int,java.lang.String)int  ", "android.net.ConnectivityManager.stopUsingNetworkFeature(int,java.lang.String)int  "], "android.permission.SET_WALLPAPER_HINTS": ["android.app.WallpaperManager.suggestDesiredDimensions(int,int)void  "], "android.permission.MODIFY_AUDIO_SETTINGS": ["android.media.AudioManager.setBluetoothScoOn(boolean)void  ", "android.media.AudioManager.setMode(int)void  ", "android.media.AudioManager.setSpeakerphoneOn(boolean)void  ", "android.media.AudioManager.startBluetoothSco()void  ", "android.media.AudioManager.stopBluetoothSco()void  ", "android.net.sip.SipAudioCall.setSpeakerMode(boolean)void  "], "android.permission.READ_PHONE_STATE": ["android.telephony.TelephonyManager.getDeviceId()java.lang.String  ", "android.telephony.TelephonyManager.getDeviceSoftwareVersion()java.lang.String  ", "android.telephony.TelephonyManager.getLine1Number()java.lang.String  ", "android.telephony.TelephonyManager.getSimSerialNumber()java.lang.String  ", "android.telephony.TelephonyManager.getSubscriberId()java.lang.String  ", "android.telephony.TelephonyManager.getVoiceMailAlphaTag()java.lang.String  ", "android.telephony.TelephonyManager.getVoiceMailNumber()java.lang.String  ", "android.telephony.TelephonyManager.listen(android.telephony.PhoneStateListener,int)void  "], "android.permission.ACCESS_FINE_LOCATION": ["android.location.LocationManager.addGpsStatusListener(android.location.GpsStatus$Listener)boolean  ", "android.location.LocationManager.addNmeaListener(android.location.GpsStatus$NmeaListener)boolean  ", "android.location.LocationManager.addProximityAlert(double,double,float,long,android.app.PendingIntent)void  ", "android.location.LocationManager.getBestProvider(android.location.Criteria,boolean)java.lang.String  ", "android.location.LocationManager.getLastKnownLocation(java.lang.String)android.location.Location  ", "android.location.LocationManager.getProvider(java.lang.String)android.location.LocationProvider  ", "android.location.LocationManager.getProviders(android.location.Criteria,boolean)java.util.List  ", "android.location.LocationManager.getProviders(boolean)java.util.List  ", "android.location.LocationManager.isProviderEnabled(java.lang.String)boolean  ", "android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)void  ", "android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)void  ", "android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)void  ", "android.location.LocationManager.requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)void  ", "android.location.LocationManager.requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)void  ", "android.location.LocationManager.requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)void  ", "android.location.LocationManager.requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)void  ", "android.location.LocationManager.requestSingleUpdate(java.lang.String,android.app.PendingIntent)void  ", "android.location.LocationManager.requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)void  ", "android.location.LocationManager.sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)boolean  ", "android.telephony.TelephonyManager.getCellLocation()android.telephony.CellLocation  ", "android.telephony.TelephonyManager.getNeighboringCellInfo()java.util.List  "], "android.permission.ACCESS_LOCATION_EXTRA_COMMANDS": ["android.location.LocationManager.sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)boolean  "], "android.permission.GET_ACCOUNTS": ["android.accounts.AccountManager.addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean)void  ", "android.accounts.AccountManager.getAccounts()android.accounts.Account[]  ", "android.accounts.AccountManager.getAccountsByType(java.lang.String)android.accounts.Account[]  "], "android.permission.BROADCAST_STICKY": ["android.accounts.AccountAuthenticatorActivity.removeStickyBroadcast(android.content.Intent)void  ", "android.accounts.AccountAuthenticatorActivity.unregisterReceiver(android.content.BroadcastReceiver)void  ", "android.accounts.AccountManager.removeOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener)void  ", "android.app.Activity.moveTaskToBack(boolean)boolean  ", "android.app.Activity.navigateUpTo(android.content.Intent)boolean  ", "android.app.Activity.navigateUpToFromChild(android.app.Activity,android.content.Intent)boolean  ", "android.app.Activity.onMenuItemSelected(int,android.view.MenuItem)boolean  ", "android.app.Activity.onNavigateUp()boolean  ", "android.app.Activity.onNavigateUpFromChild(android.app.Activity)boolean  ", "android.app.Activity.removeStickyBroadcast(android.content.Intent)void  ", "android.app.Activity.setRequestedOrientation(int)void  ", "android.app.Activity.unregisterReceiver(android.content.BroadcastReceiver)void  ", "android.app.ActivityGroup.removeStickyBroadcast(android.content.Intent)void  ", "android.app.ActivityGroup.unregisterReceiver(android.content.BroadcastReceiver)void  ", "android.app.ActivityManager.moveTaskToFront(int,int)void  ", "android.app.ActivityManager.moveTaskToFront(int,int,android.os.Bundle)void  ", "android.app.AliasActivity.removeStickyBroadcast(android.content.Intent)void  ", "android.app.AliasActivity.unregisterReceiver(android.content.BroadcastReceiver)void  ", "android.app.Application.removeStickyBroadcast(android.content.Intent)void  ", "android.app.Application.unregisterReceiver(android.content.BroadcastReceiver)void  ", "android.app.ExpandableListActivity.removeStickyBroadcast(android.content.Intent)void  ", "android.app.ExpandableListActivity.unregisterReceiver(android.content.BroadcastReceiver)void  ", "android.app.ListActivity.removeStickyBroadcast(android.content.Intent)void  ", "android.app.ListActivity.unregisterReceiver(android.content.BroadcastReceiver)void  ", "android.app.NativeActivity.removeStickyBroadcast(android.content.Intent)void  ", "android.app.NativeActivity.unregisterReceiver(android.content.BroadcastReceiver)void  ", "android.app.TabActivity.removeStickyBroadcast(android.content.Intent)void  ", "android.app.TabActivity.unregisterReceiver(android.content.BroadcastReceiver)void  ", "android.app.backup.BackupAgentHelper.removeStickyBroadcast(android.content.Intent)void  ", "android.app.backup.BackupAgentHelper.unregisterReceiver(android.content.BroadcastReceiver)void  ", "android.content.BroadcastReceiver$PendingResult.finish()void  ", "android.content.ContextWrapper.removeStickyBroadcast(android.content.Intent)void  ", "android.content.ContextWrapper.unregisterReceiver(android.content.BroadcastReceiver)void  ", "android.content.MutableContextWrapper.removeStickyBroadcast(android.content.Intent)void  ", "android.content.MutableContextWrapper.unregisterReceiver(android.content.BroadcastReceiver)void  ", "android.inputmethodservice.InputMethodService.removeStickyBroadcast(android.content.Intent)void  ", "android.inputmethodservice.InputMethodService.unregisterReceiver(android.content.BroadcastReceiver)void  ", "android.net.VpnService.removeStickyBroadcast(android.content.Intent)void  ", "android.net.VpnService.unregisterReceiver(android.content.BroadcastReceiver)void  ", "android.test.IsolatedContext.removeStickyBroadcast(android.content.Intent)void  ", "android.test.IsolatedContext.unregisterReceiver(android.content.BroadcastReceiver)void  ", "android.test.RenamingDelegatingContext.removeStickyBroadcast(android.content.Intent)void  ", "android.test.RenamingDelegatingContext.unregisterReceiver(android.content.BroadcastReceiver)void  ", "android.test.mock.MockApplication.removeStickyBroadcast(android.content.Intent)void  ", "android.test.mock.MockApplication.unregisterReceiver(android.content.BroadcastReceiver)void  ", "android.view.ContextThemeWrapper.removeStickyBroadcast(android.content.Intent)void  ", "android.view.ContextThemeWrapper.unregisterReceiver(android.content.BroadcastReceiver)void  ", "android.widget.ZoomButtonsController.setVisible(boolean)void  "], "android.permission.BLUETOOTH": ["android.bluetooth.BluetoothA2dp.getConnectedDevices()java.util.List  ", "android.bluetooth.BluetoothA2dp.getConnectionState(android.bluetooth.BluetoothDevice)int  ", "android.bluetooth.BluetoothA2dp.getDevicesMatchingConnectionStates([int)java.util.List  ", "android.bluetooth.BluetoothA2dp.isA2dpPlaying(android.bluetooth.BluetoothDevice)boolean  ", "android.bluetooth.BluetoothAdapter.cancelDiscovery()boolean  ", "android.bluetooth.BluetoothAdapter.disable()boolean  ", "android.bluetooth.BluetoothAdapter.enable()boolean  ", "android.bluetooth.BluetoothAdapter.getAddress()java.lang.String  ", "android.bluetooth.BluetoothAdapter.getBondedDevices()java.util.Set  ", "android.bluetooth.BluetoothAdapter.getName()java.lang.String  ", "android.bluetooth.BluetoothAdapter.getProfileConnectionState(int)int  ", "android.bluetooth.BluetoothAdapter.getScanMode()int  ", "android.bluetooth.BluetoothAdapter.getState()int  ", "android.bluetooth.BluetoothAdapter.isDiscovering()boolean  ", "android.bluetooth.BluetoothAdapter.isEnabled()boolean  ", "android.bluetooth.BluetoothAdapter.listenUsingInsecureRfcommWithServiceRecord(java.lang.String,java.util.UUID)android.bluetooth.BluetoothServerSocket  ", "android.bluetooth.BluetoothAdapter.listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)android.bluetooth.BluetoothServerSocket  ", "android.bluetooth.BluetoothAdapter.setName(java.lang.String)boolean  ", "android.bluetooth.BluetoothAdapter.startDiscovery()boolean  ", "android.bluetooth.BluetoothDevice.fetchUuidsWithSdp()boolean  ", "android.bluetooth.BluetoothDevice.getBluetoothClass()android.bluetooth.BluetoothClass  ", "android.bluetooth.BluetoothDevice.getBondState()int  ", "android.bluetooth.BluetoothDevice.getName()java.lang.String  ", "android.bluetooth.BluetoothDevice.getUuids()android.os.ParcelUuid[]  ", "android.bluetooth.BluetoothHeadset.getConnectedDevices()java.util.List  ", "android.bluetooth.BluetoothHeadset.getConnectionState(android.bluetooth.BluetoothDevice)int  ", "android.bluetooth.BluetoothHeadset.getDevicesMatchingConnectionStates([int)java.util.List  ", "android.bluetooth.BluetoothHeadset.isAudioConnected(android.bluetooth.BluetoothDevice)boolean  ", "android.bluetooth.BluetoothHeadset.startVoiceRecognition(android.bluetooth.BluetoothDevice)boolean  ", "android.bluetooth.BluetoothHeadset.stopVoiceRecognition(android.bluetooth.BluetoothDevice)boolean  ", "android.bluetooth.BluetoothHealth.connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)boolean  ", "android.bluetooth.BluetoothHealth.disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)boolean  ", "android.bluetooth.BluetoothHealth.getConnectedDevices()java.util.List  ", "android.bluetooth.BluetoothHealth.getConnectionState(android.bluetooth.BluetoothDevice)int  ", "android.bluetooth.BluetoothHealth.getDevicesMatchingConnectionStates([int)java.util.List  ", "android.bluetooth.BluetoothHealth.getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)android.os.ParcelFileDescriptor  ", "android.bluetooth.BluetoothHealth.registerSinkAppConfiguration(java.lang.String,int,android.bluetooth.BluetoothHealthCallback)boolean  ", "android.bluetooth.BluetoothHealth.unregisterAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration)boolean  ", "android.bluetooth.BluetoothSocket.connect()void  ", "android.media.AudioManager.setMode(int)void  ", "android.media.AudioManager.startBluetoothSco()void  ", "android.media.AudioManager.stopBluetoothSco()void  ", "android.net.ConnectivityManager.setNetworkPreference(int)void  ", "android.net.ConnectivityManager.startUsingNetworkFeature(int,java.lang.String)int  ", "android.net.ConnectivityManager.stopUsingNetworkFeature(int,java.lang.String)int  "], "android.permission.ACCESS_MOCK_LOCATION": ["android.location.LocationManager.addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)void  ", "android.location.LocationManager.clearTestProviderEnabled(java.lang.String)void  ", "android.location.LocationManager.clearTestProviderLocation(java.lang.String)void  ", "android.location.LocationManager.clearTestProviderStatus(java.lang.String)void  ", "android.location.LocationManager.removeTestProvider(java.lang.String)void  ", "android.location.LocationManager.setTestProviderEnabled(java.lang.String,boolean)void  ", "android.location.LocationManager.setTestProviderLocation(java.lang.String,android.location.Location)void  ", "android.location.LocationManager.setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)void  "], "android.permission.USE_CREDENTIALS": ["android.accounts.AccountManager.invalidateAuthToken(java.lang.String,java.lang.String)void  "]}